{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started The examples in this document use various IBM Cloud SDKs to interact with the various cloud services. You can install the modules as needed for each example, or you can install them all at once using pip : pip install --upgrade ibm-platform-services pip install --upgrade ibm-cloud-networking-services pip install --upgrade ibm-cloud-databases pip install --upgrade ibm-cloud-sdk-core pip install --upgrade ibm-schematics pip install --upgrade ibm-vpc Authentication IBM Cloud services support a variety of authentication options but for these guides focus on the token-based Identity and Access Management ( IAM ) authentication. With IAM authentication, you supply an API key and the authenticator will exchange that API key for an access token (a bearer token) by interacting with the IAM token service. The access token is then added (via the Authorization header) to each outbound request to provide the required authentication information. Access tokens are valid only for a limited amount of time and must be periodically refreshed. The IAM authenticator will automatically detect the need to refresh the access token and will interact with the IAM token service as needed to obtain a fresh access token, relieving the SDK user from that burden. For instance if we were interacting with the IAM Access Group service our authentication and client set up would look like this: from ibm_cloud_sdk_core.authenticators import IAMAuthenticator authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) accessGroupService = IamAccessGroupsV2 ( authenticator = authenticator ) For more details about the construction of the IAM authentication flow see IBM Cloud SDK Common documentation.","title":"Getting Started"},{"location":"#getting-started","text":"The examples in this document use various IBM Cloud SDKs to interact with the various cloud services. You can install the modules as needed for each example, or you can install them all at once using pip : pip install --upgrade ibm-platform-services pip install --upgrade ibm-cloud-networking-services pip install --upgrade ibm-cloud-databases pip install --upgrade ibm-cloud-sdk-core pip install --upgrade ibm-schematics pip install --upgrade ibm-vpc","title":"Getting Started"},{"location":"#authentication","text":"IBM Cloud services support a variety of authentication options but for these guides focus on the token-based Identity and Access Management ( IAM ) authentication. With IAM authentication, you supply an API key and the authenticator will exchange that API key for an access token (a bearer token) by interacting with the IAM token service. The access token is then added (via the Authorization header) to each outbound request to provide the required authentication information. Access tokens are valid only for a limited amount of time and must be periodically refreshed. The IAM authenticator will automatically detect the need to refresh the access token and will interact with the IAM token service as needed to obtain a fresh access token, relieving the SDK user from that burden. For instance if we were interacting with the IAM Access Group service our authentication and client set up would look like this: from ibm_cloud_sdk_core.authenticators import IAMAuthenticator authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) accessGroupService = IamAccessGroupsV2 ( authenticator = authenticator ) For more details about the construction of the IAM authentication flow see IBM Cloud SDK Common documentation.","title":"Authentication"},{"location":"Containers/container-registry/","text":"Container Registry Examples","title":"Container Registry Examples"},{"location":"Containers/container-registry/#container-registry-examples","text":"","title":"Container Registry Examples"},{"location":"Containers/va/","text":"Vulnerability Advisor Examples List the Vulnerability Advisor status for all container images import os from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException from ibm_container_registry.vulnerability_advisor_v3 import * ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) account = os . environ . get ( 'ACCOUNT_ID' ) accept_language = 'en_US' vulnerabilityAdvisorService = VulnerabilityAdvisorV3 ( authenticator = authenticator , account = account ) def get_all_scan_results ( vulnerabilityAdvisorService ): scanreport = vulnerabilityAdvisorService . account_status_query_path () . get_result () image_report = scanreport [ 'images' ] for image in image_report : print ( \"Container Image: \" + image [ 'name' ] + \" was marked as \" + image [ 'status' ] + \" in the most recent VA scan.\" ) try : get_all_scan_results ( vulnerabilityAdvisorService ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ]) Example Output Image: us.icr.io/rtiffany/nodejscloudantyzruj20211019:1-master-d45c0dba-20211019112141 VA Status: FAIL Last Scan: 2022 -04-22 18 :27:05 Image: us.icr.io/rtiffany/rclone-sync:8 VA Status: FAIL Last Scan: 2022 -04-24 23 :04:13 Image: us.icr.io/rtiffany/pythonbase-invoice:1 VA Status: FAIL Last Scan: 2022 -04-24 03 :05:57 Image: us.icr.io/rtiffany/cde-mkdocs:1 VA Status: FAIL Last Scan: 2022 -04-22 16 :44:34 Get latest scan results for a container image import os import json from pprint import pprint from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException from ibm_container_registry.vulnerability_advisor_v3 import * ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) imageName = \"icr.io/YOUR-NAMESPACE/IMAGE_NAME:TAG\" account = os . environ . get ( 'ACCOUNT_ID' ) accept_language = 'en_US' vulnerabilityAdvisorService = VulnerabilityAdvisorV3 ( authenticator = authenticator , account = account ) def va_scan_report ( vulnerabilityAdvisorService , imageName ): scan_report = vulnerabilityAdvisorService . image_report_query_path ( name = imageName ) . get_result () print ( json . dumps ( scan_report , indent = 2 )) try : va_scan_report ( vulnerabilityAdvisorService , imageName = imageName ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ])","title":"Vulnerability Advisor Examples"},{"location":"Containers/va/#vulnerability-advisor-examples","text":"","title":"Vulnerability Advisor Examples"},{"location":"Containers/va/#list-the-vulnerability-advisor-status-for-all-container-images","text":"import os from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException from ibm_container_registry.vulnerability_advisor_v3 import * ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) account = os . environ . get ( 'ACCOUNT_ID' ) accept_language = 'en_US' vulnerabilityAdvisorService = VulnerabilityAdvisorV3 ( authenticator = authenticator , account = account ) def get_all_scan_results ( vulnerabilityAdvisorService ): scanreport = vulnerabilityAdvisorService . account_status_query_path () . get_result () image_report = scanreport [ 'images' ] for image in image_report : print ( \"Container Image: \" + image [ 'name' ] + \" was marked as \" + image [ 'status' ] + \" in the most recent VA scan.\" ) try : get_all_scan_results ( vulnerabilityAdvisorService ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ])","title":"List the Vulnerability Advisor status for all container images"},{"location":"Containers/va/#example-output","text":"Image: us.icr.io/rtiffany/nodejscloudantyzruj20211019:1-master-d45c0dba-20211019112141 VA Status: FAIL Last Scan: 2022 -04-22 18 :27:05 Image: us.icr.io/rtiffany/rclone-sync:8 VA Status: FAIL Last Scan: 2022 -04-24 23 :04:13 Image: us.icr.io/rtiffany/pythonbase-invoice:1 VA Status: FAIL Last Scan: 2022 -04-24 03 :05:57 Image: us.icr.io/rtiffany/cde-mkdocs:1 VA Status: FAIL Last Scan: 2022 -04-22 16 :44:34","title":"Example Output"},{"location":"Containers/va/#get-latest-scan-results-for-a-container-image","text":"import os import json from pprint import pprint from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException from ibm_container_registry.vulnerability_advisor_v3 import * ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) imageName = \"icr.io/YOUR-NAMESPACE/IMAGE_NAME:TAG\" account = os . environ . get ( 'ACCOUNT_ID' ) accept_language = 'en_US' vulnerabilityAdvisorService = VulnerabilityAdvisorV3 ( authenticator = authenticator , account = account ) def va_scan_report ( vulnerabilityAdvisorService , imageName ): scan_report = vulnerabilityAdvisorService . image_report_query_path ( name = imageName ) . get_result () print ( json . dumps ( scan_report , indent = 2 )) try : va_scan_report ( vulnerabilityAdvisorService , imageName = imageName ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ])","title":"Get latest scan results for a container image"},{"location":"IAM/","text":"Configuring Environment The examples in this IAM section use the IBM Cloud Platform Services Python SDK which can be installed using the command: pip install --upgrade \"ibm-platform-services\" You will also need to export the following environment variables if they are not already set: export ACCOUNT_ID = 'YOUR ACCOUNT ID' export IBMCLOUD_API_KEY = 'YOUR IBM CLOUD API KEY ' APIs used in these examples IAM Access Groups Service IDs Endpoints The IAM APIs uses the following public global endpoint URL: https://iam.cloud.ibm.com If you enabled service endpoints in your account, you can send API requests over the IBM Cloud private network at the following base endpoint URLs. Private endpoint URL for VPC infrastructure: https://private.iam.cloud.ibm.com Private endpoint URLs for classic infrastructure: Dallas: https://private.us-south.iam.cloud.ibm.com Washington DC: https://private.us-east.iam.cloud.ibm.com","title":"Configuring Environment"},{"location":"IAM/#configuring-environment","text":"The examples in this IAM section use the IBM Cloud Platform Services Python SDK which can be installed using the command: pip install --upgrade \"ibm-platform-services\" You will also need to export the following environment variables if they are not already set: export ACCOUNT_ID = 'YOUR ACCOUNT ID' export IBMCLOUD_API_KEY = 'YOUR IBM CLOUD API KEY '","title":"Configuring Environment"},{"location":"IAM/#apis-used-in-these-examples","text":"IAM Access Groups Service IDs","title":"APIs used in these examples"},{"location":"IAM/#endpoints","text":"The IAM APIs uses the following public global endpoint URL: https://iam.cloud.ibm.com If you enabled service endpoints in your account, you can send API requests over the IBM Cloud private network at the following base endpoint URLs. Private endpoint URL for VPC infrastructure: https://private.iam.cloud.ibm.com Private endpoint URLs for classic infrastructure: Dallas: https://private.us-south.iam.cloud.ibm.com Washington DC: https://private.us-east.iam.cloud.ibm.com","title":"Endpoints"},{"location":"IAM/access-groups/","text":"Access Group Examples The examples in this document use the IAM Access Groups Python SDK. Create New Access Group The following example will create a new Access Group named python-test-access-group : import os import json from ibm_platform_services import IamAccessGroupsV2 from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException ## Pull Account ID from Environment variable account_id = os . environ . get ( 'ACCOUNT_ID' ) ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) accessGroupService = IamAccessGroupsV2 ( authenticator = authenticator ) def create_access_group ( accessGroupService ): print ( \"Creating new access group:\" ) acessGroup = accessGroupService . create_access_group ( name = 'python-test-access-group' , account_id = account_id , description = 'Example Access Group created using the Python SDK' ) . get_result () newAccessGroup = acessGroup print ( json . dumps ( newAccessGroup , indent = 2 )) try : create_access_group ( accessGroupService ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ]) Example Output Creating new access group: { \"id\" : \"AccessGroupId-xxxxxxx-2d2f-4e30-xxxxxxx-bca01772f49a\" , \"name\" : \"cool-project-access-group\" , \"description\" : \"Example Access Group created using the Python SDK for our cool new project\" , \"account_id\" : \"xxxxxxx\" , \"created_at\" : \"2022-04-25T21:07:07Z\" , \"created_by_id\" : \"IBMid-xxxxxxx\" , \"last_modified_at\" : \"2022-04-25T21:07:07Z\" , \"last_modified_by_id\" : \"IBMid-xxxxxxx\" } List All Access Groups List all of the Access Groups on the account: import os import json from ibm_platform_services import IamAccessGroupsV2 from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException ## Pull Account ID from Environment variable account_id = os . environ . get ( 'ACCOUNT_ID' ) ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( '' )) accessGroupService = IamAccessGroupsV2 ( authenticator = authenticator ) def list_access_groups ( accessGroupService ): groupsList = accessGroupService . list_access_groups ( account_id = account_id , limit = 100 ) . get_result () . get ( \"groups\" ) for group in groupsList : print ( json . dumps ( group , indent = 2 )) try : list_access_groups ( accessGroupService ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ]) Get Access Group You will need to set the Access Group ID in the script. Replace Your-Access-Group-ID-Here with the actual Access Group ID. import os import json from ibm_platform_services import IamAccessGroupsV2 from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException ## Pull Account ID from Environment variable account_id = os . environ . get ( 'ACCOUNT_ID' ) # Set access group used in the get_access_group function access_group_id = 'Your-Access-Group-ID-Here' ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) accessGroupService = IamAccessGroupsV2 ( authenticator = authenticator ) def get_access_group ( accessGroupService , access_group_id ): accessGroup = accessGroupService . get_access_group ( access_group_id ) . get_result () ag = accessGroup print ( json . dumps ( ag , indent = 2 )) try : get_access_group ( accessGroupService , access_group_id = access_group_id ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ]) Example Output { \"id\" : \"AccessGroupId-xxxxxxx-1471-440b-xxxxxxx-xxxxxxx\" , \"name\" : \"CDE VPC Infrastructure\" , \"description\" : \"Access to VPC related resources in the CDE Resource Group\" , \"account_id\" : \"xxxxxxx\" , \"created_at\" : \"2020-11-06T14:27:16Z\" , \"created_by_id\" : \"IBMid-xxxxxxx\" , \"last_modified_at\" : \"2021-07-23T16:54:39Z\" , \"last_modified_by_id\" : \"IBMid-xxxxxxx\" }","title":"Access Group Examples"},{"location":"IAM/access-groups/#access-group-examples","text":"The examples in this document use the IAM Access Groups Python SDK.","title":"Access Group Examples"},{"location":"IAM/access-groups/#create-new-access-group","text":"The following example will create a new Access Group named python-test-access-group : import os import json from ibm_platform_services import IamAccessGroupsV2 from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException ## Pull Account ID from Environment variable account_id = os . environ . get ( 'ACCOUNT_ID' ) ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) accessGroupService = IamAccessGroupsV2 ( authenticator = authenticator ) def create_access_group ( accessGroupService ): print ( \"Creating new access group:\" ) acessGroup = accessGroupService . create_access_group ( name = 'python-test-access-group' , account_id = account_id , description = 'Example Access Group created using the Python SDK' ) . get_result () newAccessGroup = acessGroup print ( json . dumps ( newAccessGroup , indent = 2 )) try : create_access_group ( accessGroupService ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ])","title":"Create New Access Group"},{"location":"IAM/access-groups/#example-output","text":"Creating new access group: { \"id\" : \"AccessGroupId-xxxxxxx-2d2f-4e30-xxxxxxx-bca01772f49a\" , \"name\" : \"cool-project-access-group\" , \"description\" : \"Example Access Group created using the Python SDK for our cool new project\" , \"account_id\" : \"xxxxxxx\" , \"created_at\" : \"2022-04-25T21:07:07Z\" , \"created_by_id\" : \"IBMid-xxxxxxx\" , \"last_modified_at\" : \"2022-04-25T21:07:07Z\" , \"last_modified_by_id\" : \"IBMid-xxxxxxx\" }","title":"Example Output"},{"location":"IAM/access-groups/#list-all-access-groups","text":"List all of the Access Groups on the account: import os import json from ibm_platform_services import IamAccessGroupsV2 from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException ## Pull Account ID from Environment variable account_id = os . environ . get ( 'ACCOUNT_ID' ) ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( '' )) accessGroupService = IamAccessGroupsV2 ( authenticator = authenticator ) def list_access_groups ( accessGroupService ): groupsList = accessGroupService . list_access_groups ( account_id = account_id , limit = 100 ) . get_result () . get ( \"groups\" ) for group in groupsList : print ( json . dumps ( group , indent = 2 )) try : list_access_groups ( accessGroupService ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ])","title":"List All Access Groups"},{"location":"IAM/access-groups/#get-access-group","text":"You will need to set the Access Group ID in the script. Replace Your-Access-Group-ID-Here with the actual Access Group ID. import os import json from ibm_platform_services import IamAccessGroupsV2 from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException ## Pull Account ID from Environment variable account_id = os . environ . get ( 'ACCOUNT_ID' ) # Set access group used in the get_access_group function access_group_id = 'Your-Access-Group-ID-Here' ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) accessGroupService = IamAccessGroupsV2 ( authenticator = authenticator ) def get_access_group ( accessGroupService , access_group_id ): accessGroup = accessGroupService . get_access_group ( access_group_id ) . get_result () ag = accessGroup print ( json . dumps ( ag , indent = 2 )) try : get_access_group ( accessGroupService , access_group_id = access_group_id ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ])","title":"Get Access Group"},{"location":"IAM/access-groups/#example-output_1","text":"{ \"id\" : \"AccessGroupId-xxxxxxx-1471-440b-xxxxxxx-xxxxxxx\" , \"name\" : \"CDE VPC Infrastructure\" , \"description\" : \"Access to VPC related resources in the CDE Resource Group\" , \"account_id\" : \"xxxxxxx\" , \"created_at\" : \"2020-11-06T14:27:16Z\" , \"created_by_id\" : \"IBMid-xxxxxxx\" , \"last_modified_at\" : \"2021-07-23T16:54:39Z\" , \"last_modified_by_id\" : \"IBMid-xxxxxxx\" }","title":"Example Output"},{"location":"Interconnectivity/","text":"Interconnectivity Examples The Examples in this section use the IBM Cloud Networking Services module. This can be installed using the following command: pip install --upgrade \"ibm-cloud-networking-services\"","title":"Interconnectivity Examples"},{"location":"Interconnectivity/#interconnectivity-examples","text":"The Examples in this section use the IBM Cloud Networking Services module. This can be installed using the following command: pip install --upgrade \"ibm-cloud-networking-services\"","title":"Interconnectivity Examples"},{"location":"VPC/","text":"Configuring Environment The examples in this IAM section use the IBM Cloud Platform Services Python SDK which can be installed using the command: pip install --upgrade \"ibm-vpc\" You will also need to export the following environment variables if they are not already set: export VPC_REGION = 'REGION FOR YOUR VPC RESOURCES' export IBMCLOUD_API_KEY = 'YOUR IBM CLOUD API KEY' export RESOURCE_GROUP = ' NAME OF RESOURCE_GROUP TO USE FOR DEPLOYMENTS \" Versioning Calls to the VPC API require a major version as the first segment of the request path ( ex: /v1/ ) and a date-based version as a query parameter in the format version=YYYY-MM-DD . For safety I set this to one day behind the current date using the datetime module: from datetime import datetime , timedelta today = datetime . now () date = today + timedelta ( days = - 1 ) version_date = date . strftime ( \"%Y-%m- %d \" ) ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) ## Construct the VPC service and set the regional endpoint vpcService = VpcV1 ( authenticator = authenticator , version = version_date , ) vpcServiceRegion = 'https://' + os . environ . get ( 'VPC_REGION' ) + '.iaas.cloud.ibm.com/v1' vpcService . set_service_url ( vpcServiceRegion ) Endpoints VPC uses region specific API endpoints: US South ( us-south ): https://us-south.iaas.cloud.ibm.com/v1 US East ( us-east ): https://us-east.iaas.cloud.ibm.com/v1 Toronto ( ca-tor ): https://ca-tor.iaas.cloud.ibm.com/v1 United Kingdom ( eu-gb ): https://eu-gb.iaas.cloud.ibm.com/v1 Germany ( eu-de ): https://eu-de.iaas.cloud.ibm.com/v1 Tokyo ( jp-tok ): https://jp-tok.iaas.cloud.ibm.com/v1 Osaka ( jp-osa ): https://jp-osa.iaas.cloud.ibm.com/v1 Sydney ( au-syd ): https://au-syd.iaas.cloud.ibm.com/v1 S\u00e3o Paulo ( br-sao ): https://br-sao.iaas.cloud.ibm.com/v1","title":"Configuring Environment"},{"location":"VPC/#configuring-environment","text":"The examples in this IAM section use the IBM Cloud Platform Services Python SDK which can be installed using the command: pip install --upgrade \"ibm-vpc\" You will also need to export the following environment variables if they are not already set: export VPC_REGION = 'REGION FOR YOUR VPC RESOURCES' export IBMCLOUD_API_KEY = 'YOUR IBM CLOUD API KEY' export RESOURCE_GROUP = ' NAME OF RESOURCE_GROUP TO USE FOR DEPLOYMENTS \"","title":"Configuring Environment"},{"location":"VPC/#versioning","text":"Calls to the VPC API require a major version as the first segment of the request path ( ex: /v1/ ) and a date-based version as a query parameter in the format version=YYYY-MM-DD . For safety I set this to one day behind the current date using the datetime module: from datetime import datetime , timedelta today = datetime . now () date = today + timedelta ( days = - 1 ) version_date = date . strftime ( \"%Y-%m- %d \" ) ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) ## Construct the VPC service and set the regional endpoint vpcService = VpcV1 ( authenticator = authenticator , version = version_date , ) vpcServiceRegion = 'https://' + os . environ . get ( 'VPC_REGION' ) + '.iaas.cloud.ibm.com/v1' vpcService . set_service_url ( vpcServiceRegion )","title":"Versioning"},{"location":"VPC/#endpoints","text":"VPC uses region specific API endpoints: US South ( us-south ): https://us-south.iaas.cloud.ibm.com/v1 US East ( us-east ): https://us-east.iaas.cloud.ibm.com/v1 Toronto ( ca-tor ): https://ca-tor.iaas.cloud.ibm.com/v1 United Kingdom ( eu-gb ): https://eu-gb.iaas.cloud.ibm.com/v1 Germany ( eu-de ): https://eu-de.iaas.cloud.ibm.com/v1 Tokyo ( jp-tok ): https://jp-tok.iaas.cloud.ibm.com/v1 Osaka ( jp-osa ): https://jp-osa.iaas.cloud.ibm.com/v1 Sydney ( au-syd ): https://au-syd.iaas.cloud.ibm.com/v1 S\u00e3o Paulo ( br-sao ): https://br-sao.iaas.cloud.ibm.com/v1","title":"Endpoints"},{"location":"VPC/create-single-zone-vpc/","text":"Single Zone VPC The following example will deploy a new VPC as well as a Public Gateway and Subnet in a single zone within the region. import os import json from pprint import pprint from ibm_vpc import VpcV1 from ibm_platform_services import ResourceManagerV2 from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException from haikunator import Haikunator from datetime import datetime , timedelta today = datetime . now () date = today + timedelta ( days = - 1 ) version_date = date . strftime ( \"%Y-%m- %d \" ) ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) resourceService = ResourceManagerV2 ( authenticator = authenticator ) resource_group = ( os . environ . get ( 'RESOURCE_GROUP' )) resource_group_list = resourceService . list_resource_groups ( account_id = ( os . environ . get ( 'IBM_ACCOUNT' )), include_deleted = False , ) . get_result () rglist = resource_group_list [ 'resources' ] rg_id = rglist [ 'name' == resource_group ][ 'id' ] ## Construct the VPC service and set the regional endpoint vpcService = VpcV1 ( authenticator = authenticator ) vpcServiceRegion = 'https://' + os . environ . get ( 'VPC_REGION' ) + '.iaas.cloud.ibm.com/v1' vpcService . set_service_url ( vpcServiceRegion ) ## Pull zones based on region. Set deployment zone to first in region by default. ## Todo: based on length of zones returned, create that number of pubgws and subnets zones = vpcService . list_region_zones ( os . environ . get ( 'VPC_REGION' )) . get_result ()[ 'zones' ] deployment_zone = zones [ 0 ][ 'name' ] ## Use Haikunator to generate a unique heroku like base name for resources. ## Handy while testing haikunator = Haikunator () basename = haikunator . haikunate ( token_length = 0 , delimiter = '' ) ## Set up some parameters that will be used by multiple functions resource_group_identity_model = {} resource_group_identity_model [ 'id' ] = rg_id resource_group_id = resource_group_identity_model zone_identity_model = {} zone_identity_model [ 'name' ] = deployment_zone zone = zone_identity_model def create_vpc ( vpcService ): address_prefix_management = 'auto' classic_access = False name = ( basename + \"-vpc\" ) new_vpc = vpcService . create_vpc ( classic_access = classic_access , address_prefix_management = address_prefix_management , name = name , resource_group = resource_group_id ) . get_result () print ( \" \\n Creating IBM Cloud VPC in \" + os . environ . get ( 'VPC_REGION' ) + \" ---- \\n \" ) newVpc = create_vpc ( vpcService ) print ( \"Creation Complete. VPC Info: ---- \\n Name: \" + newVpc [ 'name' ] + \" \\n ID: \" + newVpc [ 'id' ] + \" \\n CRN: \" + newVpc [ 'crn' ] + \" ---- \\n ---- \\n \" ) print ( newVpc [ 'default_network_acl' ][ 'id' ]) return new_vpc def create_pubgw ( vpcService ): vpc_identity_model = { 'id' : newVpc [ 'id' ]} vpc = vpc_identity_model zone = zone_identity_model name = ( basename + \"-\" + deployment_zone + \"-gw\" ) new_pubgw = vpcService . create_public_gateway ( vpc , zone , name = name , floating_ip = {}, resource_group = resource_group_id ) . get_result () newPubGw = create_pubgw ( vpcService ) print ( \"Creation Complete. Pubgw Info: ---- \\n Name: \" + newPubGw [ 'name' ] + \" \\n ID: \" + newPubGw [ 'id' ] + \" \\n CRN: \" + newPubGw [ 'crn' ]) return new_pubgw def create_subnet ( vpcService ): vpc_identity_model = { 'id' : newVpc [ 'id' ]} vpc = vpc_identity_model zone = zone_identity_model name = ( basename + \"-\" + deployment_zone + \"-subnet\" ) network_acl_identity_model = {} network_acl_identity_model [ 'id' ] = newVpc [ 'default_network_acl' ][ 'id' ] public_gateway_identity_model = {} public_gateway_identity_model [ 'id' ] = newPubGw [ 'id' ] subnet_prototype_model = {} subnet_prototype_model [ 'ip_version' ] = 'ipv4' subnet_prototype_model [ 'name' ] = name subnet_prototype_model [ 'network_acl' ] = network_acl_identity_model subnet_prototype_model [ 'public_gateway' ] = public_gateway_identity_model subnet_prototype_model [ 'resource_group' ] = resource_group_identity_model subnet_prototype_model [ 'vpc' ] = vpc subnet_prototype_model [ 'total_ipv4_address_count' ] = 256 subnet_prototype_model [ 'zone' ] = zone subnet_prototype = subnet_prototype_model new_subnet = vpcService . create_subnet ( subnet_prototype ) . get_result () print ( \" \\n Creating VPC Subnet in \" + deployment_zone + \" ---- \\n \" ) newSubnet = create_subnet ( vpcService ) print ( \"Creation Complete. Subnet Info: ---- \\n Name: \" + newSubnet [ 'name' ] + \" \\n ID: \" + newSubnet [ 'id' ] + \" \\n CRN: \" + newSubnet [ 'crn' ]) return new_subnet try : create_vpc ( vpcService ) create_pubgw ( vpcService ) create_subnet ( vpcService ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ])","title":"Single Zone VPC"},{"location":"VPC/create-single-zone-vpc/#single-zone-vpc","text":"The following example will deploy a new VPC as well as a Public Gateway and Subnet in a single zone within the region. import os import json from pprint import pprint from ibm_vpc import VpcV1 from ibm_platform_services import ResourceManagerV2 from ibm_cloud_sdk_core.authenticators import IAMAuthenticator from ibm_cloud_sdk_core import ApiException from haikunator import Haikunator from datetime import datetime , timedelta today = datetime . now () date = today + timedelta ( days = - 1 ) version_date = date . strftime ( \"%Y-%m- %d \" ) ## Construct IAM Authentication using IBMCLOUD_API_KEY Environment variable authenticator = IAMAuthenticator ( os . environ . get ( 'IBMCLOUD_API_KEY' )) resourceService = ResourceManagerV2 ( authenticator = authenticator ) resource_group = ( os . environ . get ( 'RESOURCE_GROUP' )) resource_group_list = resourceService . list_resource_groups ( account_id = ( os . environ . get ( 'IBM_ACCOUNT' )), include_deleted = False , ) . get_result () rglist = resource_group_list [ 'resources' ] rg_id = rglist [ 'name' == resource_group ][ 'id' ] ## Construct the VPC service and set the regional endpoint vpcService = VpcV1 ( authenticator = authenticator ) vpcServiceRegion = 'https://' + os . environ . get ( 'VPC_REGION' ) + '.iaas.cloud.ibm.com/v1' vpcService . set_service_url ( vpcServiceRegion ) ## Pull zones based on region. Set deployment zone to first in region by default. ## Todo: based on length of zones returned, create that number of pubgws and subnets zones = vpcService . list_region_zones ( os . environ . get ( 'VPC_REGION' )) . get_result ()[ 'zones' ] deployment_zone = zones [ 0 ][ 'name' ] ## Use Haikunator to generate a unique heroku like base name for resources. ## Handy while testing haikunator = Haikunator () basename = haikunator . haikunate ( token_length = 0 , delimiter = '' ) ## Set up some parameters that will be used by multiple functions resource_group_identity_model = {} resource_group_identity_model [ 'id' ] = rg_id resource_group_id = resource_group_identity_model zone_identity_model = {} zone_identity_model [ 'name' ] = deployment_zone zone = zone_identity_model def create_vpc ( vpcService ): address_prefix_management = 'auto' classic_access = False name = ( basename + \"-vpc\" ) new_vpc = vpcService . create_vpc ( classic_access = classic_access , address_prefix_management = address_prefix_management , name = name , resource_group = resource_group_id ) . get_result () print ( \" \\n Creating IBM Cloud VPC in \" + os . environ . get ( 'VPC_REGION' ) + \" ---- \\n \" ) newVpc = create_vpc ( vpcService ) print ( \"Creation Complete. VPC Info: ---- \\n Name: \" + newVpc [ 'name' ] + \" \\n ID: \" + newVpc [ 'id' ] + \" \\n CRN: \" + newVpc [ 'crn' ] + \" ---- \\n ---- \\n \" ) print ( newVpc [ 'default_network_acl' ][ 'id' ]) return new_vpc def create_pubgw ( vpcService ): vpc_identity_model = { 'id' : newVpc [ 'id' ]} vpc = vpc_identity_model zone = zone_identity_model name = ( basename + \"-\" + deployment_zone + \"-gw\" ) new_pubgw = vpcService . create_public_gateway ( vpc , zone , name = name , floating_ip = {}, resource_group = resource_group_id ) . get_result () newPubGw = create_pubgw ( vpcService ) print ( \"Creation Complete. Pubgw Info: ---- \\n Name: \" + newPubGw [ 'name' ] + \" \\n ID: \" + newPubGw [ 'id' ] + \" \\n CRN: \" + newPubGw [ 'crn' ]) return new_pubgw def create_subnet ( vpcService ): vpc_identity_model = { 'id' : newVpc [ 'id' ]} vpc = vpc_identity_model zone = zone_identity_model name = ( basename + \"-\" + deployment_zone + \"-subnet\" ) network_acl_identity_model = {} network_acl_identity_model [ 'id' ] = newVpc [ 'default_network_acl' ][ 'id' ] public_gateway_identity_model = {} public_gateway_identity_model [ 'id' ] = newPubGw [ 'id' ] subnet_prototype_model = {} subnet_prototype_model [ 'ip_version' ] = 'ipv4' subnet_prototype_model [ 'name' ] = name subnet_prototype_model [ 'network_acl' ] = network_acl_identity_model subnet_prototype_model [ 'public_gateway' ] = public_gateway_identity_model subnet_prototype_model [ 'resource_group' ] = resource_group_identity_model subnet_prototype_model [ 'vpc' ] = vpc subnet_prototype_model [ 'total_ipv4_address_count' ] = 256 subnet_prototype_model [ 'zone' ] = zone subnet_prototype = subnet_prototype_model new_subnet = vpcService . create_subnet ( subnet_prototype ) . get_result () print ( \" \\n Creating VPC Subnet in \" + deployment_zone + \" ---- \\n \" ) newSubnet = create_subnet ( vpcService ) print ( \"Creation Complete. Subnet Info: ---- \\n Name: \" + newSubnet [ 'name' ] + \" \\n ID: \" + newSubnet [ 'id' ] + \" \\n CRN: \" + newSubnet [ 'crn' ]) return new_subnet try : create_vpc ( vpcService ) create_pubgw ( vpcService ) create_subnet ( vpcService ) except ApiException as ae : print ( \"Method failed\" ) print ( \" - status code: \" + str ( ae . code )) print ( \" - error message: \" + ae . message ) if ( \"reason\" in ae . http_response . json ()): print ( \" - reason: \" + ae . http_response . json ()[ \"reason\" ])","title":"Single Zone VPC"}]}